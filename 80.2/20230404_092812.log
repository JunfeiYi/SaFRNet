2023-04-04 09:28:12,401 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.12 (default, Oct 12 2021, 13:49:34) [GCC 7.5.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090
CUDA_HOME: :/usr/local/cuda-11.1
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
PyTorch: 1.8.0+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.9.0+cu111
OpenCV: 4.7.0
MMCV: 1.7.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.1
MMDetection: 2.25.3+HEAD
------------------------------------------------------------

2023-04-04 09:28:12,575 - mmdet - INFO - Distributed training: False
2023-04-04 09:28:12,750 - mmdet - INFO - Config:
dataset_type = 'CocoDataset'
data_root = 'data/coco/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=4,
    train=dict(
        type='CocoDataset',
        ann_file='data/coco/annotations/instances_train2017.json',
        img_prefix='data/coco/train2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ],
        classes=('pinsub', 'pinsug', 'pinsumiss', 'plinkgrp', 'pnest', 'psusp',
                 'pvib', 'pvibmiss')),
    val=dict(
        type='CocoDataset',
        ann_file='data/coco/annotations/instances_val2017.json',
        img_prefix='data/coco/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ],
        classes=('pinsub', 'pinsug', 'pinsumiss', 'plinkgrp', 'pnest', 'psusp',
                 'pvib', 'pvibmiss')),
    test=dict(
        type='CocoDataset',
        ann_file='data/coco/annotations/instances_val2017.json',
        img_prefix='data/coco/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ],
        classes=('pinsub', 'pinsug', 'pinsumiss', 'plinkgrp', 'pnest', 'psusp',
                 'pvib', 'pvibmiss')))
evaluation = dict(interval=1, metric='bbox')
optimizer = dict(type='GCSGD', lr=0.01, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[16, 22])
runner = dict(type='EpochBasedRunner', max_epochs=24)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'checkpoints/atss_r50_fpn_1x_coco_20200209-985f7bd0.pth'
resume_from = 'work_dirs/atss_r50_fpn_1x_coco/epoch_17.pth'
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
auto_scale_lr = dict(enable=False, base_batch_size=16)
model = dict(
    type='ATSS',
    backbone=dict(
        type='AugResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        start_level=1,
        add_extra_convs='on_output',
        num_outs=5),
    bbox_head=dict(
        type='BoderATSSHead',
        num_classes=8,
        in_channels=256,
        stacked_convs=4,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            ratios=[1.0],
            octave_base_scale=8,
            scales_per_octave=1,
            strides=[8, 16, 32, 64, 128]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[0.1, 0.1, 0.2, 0.2]),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=1.0),
        loss_bbox=dict(type='GIoULoss', loss_weight=2.0),
        loss_centerness=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)),
    train_cfg=dict(
        assigner=dict(type='ATSSAssigner', topk=9),
        allowed_border=-1,
        pos_weight=-1,
        debug=False),
    test_cfg=dict(
        nms_pre=1000,
        min_bbox_size=0,
        score_thr=0.05,
        nms=dict(type='soft_nms', iou_threshold=0.6, min_score=0.001),
        max_per_img=100))
classes = ('pinsub', 'pinsug', 'pinsumiss', 'plinkgrp', 'pnest', 'psusp',
           'pvib', 'pvibmiss')
work_dir = './work_dirs/atss_r50_fpn_1x_coco'
auto_resume = False
gpu_ids = [0]

2023-04-04 09:28:12,750 - mmdet - INFO - Set random seed to 406068087, deterministic: False
2023-04-04 09:28:15,550 - mmdet - INFO - initialize AugResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'torchvision://resnet50'}
2023-04-04 09:28:15,724 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from torchvision://resnet50 

neck.lateral_convs.0.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

neck.lateral_convs.1.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

neck.lateral_convs.2.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

neck.fpn_convs.4.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.4.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.cls_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in BoderATSSHead  

bbox_head.cls_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.cls_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.cls_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in BoderATSSHead  

bbox_head.cls_convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.cls_convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.cls_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in BoderATSSHead  

bbox_head.cls_convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.cls_convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.cls_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in BoderATSSHead  

bbox_head.cls_convs.3.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.cls_convs.3.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.reg_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in BoderATSSHead  

bbox_head.reg_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.reg_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.reg_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in BoderATSSHead  

bbox_head.reg_convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.reg_convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.reg_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in BoderATSSHead  

bbox_head.reg_convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.reg_convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.reg_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in BoderATSSHead  

bbox_head.reg_convs.3.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.reg_convs.3.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.atss_cls.weight - torch.Size([8, 256, 3, 3]): 
Initialized by user-defined `init_weights` in BoderATSSHead  

bbox_head.atss_cls.bias - torch.Size([8]): 
Initialized by user-defined `init_weights` in BoderATSSHead  

bbox_head.atss_reg.weight - torch.Size([4, 256, 3, 3]): 
Initialized by user-defined `init_weights` in BoderATSSHead  

bbox_head.atss_reg.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in BoderATSSHead  

bbox_head.atss_centerness.weight - torch.Size([1, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.atss_centerness.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.scales.0.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.scales.1.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.scales.2.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.scales.3.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.scales.4.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.border_cls_subnet.cur_point_conv.0.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.border_cls_subnet.cur_point_conv.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.border_cls_subnet.ltrb_conv.0.weight - torch.Size([1024, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.border_cls_subnet.ltrb_conv.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.border_cls_subnet.border_mask.weight - torch.Size([1280, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.border_cls_subnet.border_mask.bias - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.border_cls_subnet.border_conv.0.weight - torch.Size([256, 1280, 1, 1]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.border_cls_subnet.border_conv.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.border_bbox_subnet.cur_point_conv.0.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.border_bbox_subnet.cur_point_conv.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.border_bbox_subnet.ltrb_conv.0.weight - torch.Size([1024, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.border_bbox_subnet.ltrb_conv.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.border_bbox_subnet.border_mask.weight - torch.Size([1280, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.border_bbox_subnet.border_mask.bias - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.border_bbox_subnet.border_conv.0.weight - torch.Size([256, 1280, 1, 1]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.border_bbox_subnet.border_conv.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.border_cls_score.weight - torch.Size([8, 256, 1, 1]): 
Initialized by user-defined `init_weights` in BoderATSSHead  

bbox_head.border_cls_score.bias - torch.Size([8]): 
Initialized by user-defined `init_weights` in BoderATSSHead  

bbox_head.border_bbox_pred.weight - torch.Size([4, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.border_bbox_pred.bias - torch.Size([4]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.p_pool.h_conv.weight - torch.Size([256, 256, 1, 3]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.p_pool.h_conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.p_pool.w_conv.weight - torch.Size([256, 256, 1, 3]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.p_pool.w_conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.p_pool.conv.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of ATSS  

bbox_head.p_pool.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ATSS  
2023-04-04 09:28:15,969 - mmdet - INFO - Automatic scaling of learning rate (LR) has been disabled.
2023-04-04 09:28:15,981 - mmdet - INFO - load checkpoint from local path: work_dirs/atss_r50_fpn_1x_coco/epoch_17.pth
2023-04-04 09:28:16,280 - mmdet - INFO - resumed epoch 17, iter 4250
2023-04-04 09:28:16,281 - mmdet - INFO - Start running, host: user@user-System-Product-Name, work_dir: /home/user/Documents/0Yi_work/tiny-mmdetection/work_dirs/atss_r50_fpn_1x_coco
2023-04-04 09:28:16,281 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-04-04 09:28:16,281 - mmdet - INFO - workflow: [('train', 1)], max: 24 epochs
2023-04-04 09:28:16,281 - mmdet - INFO - Checkpoints will be saved to /home/user/Documents/0Yi_work/tiny-mmdetection/work_dirs/atss_r50_fpn_1x_coco by HardDiskBackend.
2023-04-04 09:29:15,813 - mmdet - INFO - Epoch [18][50/250]	lr: 1.000e-03, eta: 0:33:43, time: 1.190, data_time: 0.070, memory: 13415, loss_cls: 0.0247, loss_bbox: 0.0989, loss_centerness: 0.5991, loss_bbox_boder: 0.2052, loss_cls_boder: 0.0483, loss: 0.9764
2023-04-04 09:30:09,853 - mmdet - INFO - Epoch [18][100/250]	lr: 1.000e-03, eta: 0:31:13, time: 1.081, data_time: 0.006, memory: 13415, loss_cls: 0.0255, loss_bbox: 0.1009, loss_centerness: 0.5953, loss_bbox_boder: 0.2076, loss_cls_boder: 0.0490, loss: 0.9783
2023-04-04 09:31:04,459 - mmdet - INFO - Epoch [18][150/250]	lr: 1.000e-03, eta: 0:29:53, time: 1.092, data_time: 0.006, memory: 13415, loss_cls: 0.0250, loss_bbox: 0.1027, loss_centerness: 0.5964, loss_bbox_boder: 0.2108, loss_cls_boder: 0.0487, loss: 0.9836
2023-04-04 09:31:58,857 - mmdet - INFO - Epoch [18][200/250]	lr: 1.000e-03, eta: 0:28:44, time: 1.088, data_time: 0.006, memory: 13415, loss_cls: 0.0250, loss_bbox: 0.0969, loss_centerness: 0.5991, loss_bbox_boder: 0.1998, loss_cls_boder: 0.0488, loss: 0.9697
2023-04-04 09:32:53,651 - mmdet - INFO - Exp name: atss_r50_fpn_1x_coco.py
2023-04-04 09:32:53,651 - mmdet - INFO - Epoch [18][250/250]	lr: 1.000e-03, eta: 0:27:44, time: 1.096, data_time: 0.006, memory: 13415, loss_cls: 0.0252, loss_bbox: 0.0955, loss_centerness: 0.5944, loss_bbox_boder: 0.1957, loss_cls_boder: 0.0487, loss: 0.9595
2023-04-04 09:32:53,725 - mmdet - INFO - Saving checkpoint at 18 epochs
2023-04-04 09:33:22,719 - mmdet - INFO - Evaluating bbox...
2023-04-04 09:33:23,494 - mmdet - INFO - 
Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.756
Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.974
Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.842
Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.850
Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.676
Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.766
Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.843
Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.843
Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.843
Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.850
Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.761
Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.853

2023-04-04 09:33:23,506 - mmdet - INFO - Exp name: atss_r50_fpn_1x_coco.py
2023-04-04 09:33:23,506 - mmdet - INFO - Epoch(val) [18][250]	bbox_mAP: 0.7560, bbox_mAP_50: 0.9740, bbox_mAP_75: 0.8420, bbox_mAP_s: 0.8500, bbox_mAP_m: 0.6760, bbox_mAP_l: 0.7660, bbox_mAP_copypaste: 0.756 0.974 0.842 0.850 0.676 0.766
2023-04-04 09:34:20,791 - mmdet - INFO - Epoch [19][50/250]	lr: 1.000e-03, eta: 0:26:57, time: 1.145, data_time: 0.063, memory: 13415, loss_cls: 0.0232, loss_bbox: 0.0929, loss_centerness: 0.5930, loss_bbox_boder: 0.1878, loss_cls_boder: 0.0441, loss: 0.9410
2023-04-04 09:35:15,571 - mmdet - INFO - Epoch [19][100/250]	lr: 1.000e-03, eta: 0:25:57, time: 1.096, data_time: 0.006, memory: 13415, loss_cls: 0.0218, loss_bbox: 0.0949, loss_centerness: 0.5981, loss_bbox_boder: 0.1930, loss_cls_boder: 0.0423, loss: 0.9502
2023-04-04 09:36:10,392 - mmdet - INFO - Epoch [19][150/250]	lr: 1.000e-03, eta: 0:24:59, time: 1.096, data_time: 0.006, memory: 13415, loss_cls: 0.0247, loss_bbox: 0.0987, loss_centerness: 0.5991, loss_bbox_boder: 0.2018, loss_cls_boder: 0.0475, loss: 0.9717
2023-04-04 09:37:04,951 - mmdet - INFO - Epoch [19][200/250]	lr: 1.000e-03, eta: 0:24:00, time: 1.091, data_time: 0.007, memory: 13415, loss_cls: 0.0235, loss_bbox: 0.0910, loss_centerness: 0.5957, loss_bbox_boder: 0.1869, loss_cls_boder: 0.0453, loss: 0.9424
2023-04-04 09:37:59,832 - mmdet - INFO - Exp name: atss_r50_fpn_1x_coco.py
2023-04-04 09:37:59,832 - mmdet - INFO - Epoch [19][250/250]	lr: 1.000e-03, eta: 0:23:04, time: 1.098, data_time: 0.007, memory: 13415, loss_cls: 0.0255, loss_bbox: 0.0904, loss_centerness: 0.5958, loss_bbox_boder: 0.1839, loss_cls_boder: 0.0496, loss: 0.9452
2023-04-04 09:37:59,890 - mmdet - INFO - Saving checkpoint at 19 epochs
2023-04-04 09:38:29,120 - mmdet - INFO - Evaluating bbox...
2023-04-04 09:38:29,865 - mmdet - INFO - 
Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.771
Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.975
Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.849
Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.850
Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.693
Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.780
Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.859
Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.859
Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.859
Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.850
Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.759
Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.870

2023-04-04 09:38:29,875 - mmdet - INFO - Exp name: atss_r50_fpn_1x_coco.py
2023-04-04 09:38:29,875 - mmdet - INFO - Epoch(val) [19][250]	bbox_mAP: 0.7710, bbox_mAP_50: 0.9750, bbox_mAP_75: 0.8490, bbox_mAP_s: 0.8500, bbox_mAP_m: 0.6930, bbox_mAP_l: 0.7800, bbox_mAP_copypaste: 0.771 0.975 0.849 0.850 0.693 0.780
2023-04-04 09:39:27,311 - mmdet - INFO - Epoch [20][50/250]	lr: 1.000e-03, eta: 0:22:13, time: 1.149, data_time: 0.065, memory: 13415, loss_cls: 0.0219, loss_bbox: 0.0882, loss_centerness: 0.5949, loss_bbox_boder: 0.1798, loss_cls_boder: 0.0411, loss: 0.9258
2023-04-04 09:40:22,003 - mmdet - INFO - Epoch [20][100/250]	lr: 1.000e-03, eta: 0:21:16, time: 1.094, data_time: 0.006, memory: 13415, loss_cls: 0.0213, loss_bbox: 0.0849, loss_centerness: 0.5950, loss_bbox_boder: 0.1734, loss_cls_boder: 0.0407, loss: 0.9152
2023-04-04 09:41:16,818 - mmdet - INFO - Epoch [20][150/250]	lr: 1.000e-03, eta: 0:20:19, time: 1.096, data_time: 0.006, memory: 13415, loss_cls: 0.0215, loss_bbox: 0.0850, loss_centerness: 0.5956, loss_bbox_boder: 0.1720, loss_cls_boder: 0.0418, loss: 0.9159
2023-04-04 09:42:11,767 - mmdet - INFO - Epoch [20][200/250]	lr: 1.000e-03, eta: 0:19:23, time: 1.099, data_time: 0.007, memory: 13415, loss_cls: 0.0234, loss_bbox: 0.0909, loss_centerness: 0.5960, loss_bbox_boder: 0.1830, loss_cls_boder: 0.0454, loss: 0.9387
2023-04-04 09:43:06,535 - mmdet - INFO - Exp name: atss_r50_fpn_1x_coco.py
2023-04-04 09:43:06,536 - mmdet - INFO - Epoch [20][250/250]	lr: 1.000e-03, eta: 0:18:27, time: 1.095, data_time: 0.007, memory: 13415, loss_cls: 0.0229, loss_bbox: 0.0904, loss_centerness: 0.5950, loss_bbox_boder: 0.1836, loss_cls_boder: 0.0434, loss: 0.9353
2023-04-04 09:43:06,617 - mmdet - INFO - Saving checkpoint at 20 epochs
2023-04-04 09:43:36,036 - mmdet - INFO - Evaluating bbox...
2023-04-04 09:43:36,760 - mmdet - INFO - 
Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.783
Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.976
Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.856
Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.901
Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.745
Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.791
Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.866
Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.866
Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.866
Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.900
Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.790
Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.877

2023-04-04 09:43:36,769 - mmdet - INFO - Exp name: atss_r50_fpn_1x_coco.py
2023-04-04 09:43:36,769 - mmdet - INFO - Epoch(val) [20][250]	bbox_mAP: 0.7830, bbox_mAP_50: 0.9760, bbox_mAP_75: 0.8560, bbox_mAP_s: 0.9010, bbox_mAP_m: 0.7450, bbox_mAP_l: 0.7910, bbox_mAP_copypaste: 0.783 0.976 0.856 0.901 0.745 0.791
2023-04-04 09:44:35,477 - mmdet - INFO - Epoch [21][50/250]	lr: 1.000e-03, eta: 0:17:35, time: 1.174, data_time: 0.061, memory: 13415, loss_cls: 0.0204, loss_bbox: 0.0796, loss_centerness: 0.5944, loss_bbox_boder: 0.1622, loss_cls_boder: 0.0390, loss: 0.8956
2023-04-04 09:45:31,541 - mmdet - INFO - Epoch [21][100/250]	lr: 1.000e-03, eta: 0:16:40, time: 1.121, data_time: 0.008, memory: 13415, loss_cls: 0.0210, loss_bbox: 0.0878, loss_centerness: 0.5979, loss_bbox_boder: 0.1767, loss_cls_boder: 0.0398, loss: 0.9232
2023-04-04 09:46:27,896 - mmdet - INFO - Epoch [21][150/250]	lr: 1.000e-03, eta: 0:15:45, time: 1.127, data_time: 0.009, memory: 13415, loss_cls: 0.0213, loss_bbox: 0.0837, loss_centerness: 0.5942, loss_bbox_boder: 0.1690, loss_cls_boder: 0.0406, loss: 0.9088
2023-04-04 09:47:24,208 - mmdet - INFO - Epoch [21][200/250]	lr: 1.000e-03, eta: 0:14:50, time: 1.126, data_time: 0.010, memory: 13415, loss_cls: 0.0219, loss_bbox: 0.0891, loss_centerness: 0.5954, loss_bbox_boder: 0.1805, loss_cls_boder: 0.0421, loss: 0.9290
2023-04-04 09:48:20,581 - mmdet - INFO - Exp name: atss_r50_fpn_1x_coco.py
2023-04-04 09:48:20,581 - mmdet - INFO - Epoch [21][250/250]	lr: 1.000e-03, eta: 0:13:55, time: 1.127, data_time: 0.010, memory: 13415, loss_cls: 0.0240, loss_bbox: 0.0884, loss_centerness: 0.5973, loss_bbox_boder: 0.1781, loss_cls_boder: 0.0468, loss: 0.9346
2023-04-04 09:48:20,674 - mmdet - INFO - Saving checkpoint at 21 epochs
2023-04-04 09:48:52,503 - mmdet - INFO - Evaluating bbox...
2023-04-04 09:48:53,312 - mmdet - INFO - 
Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.789
Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.977
Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.859
Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.900
Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.742
Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.798
Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.874
Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.874
Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.874
Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.900
Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.807
Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.884

2023-04-04 09:48:53,322 - mmdet - INFO - Exp name: atss_r50_fpn_1x_coco.py
2023-04-04 09:48:53,322 - mmdet - INFO - Epoch(val) [21][250]	bbox_mAP: 0.7890, bbox_mAP_50: 0.9770, bbox_mAP_75: 0.8590, bbox_mAP_s: 0.9000, bbox_mAP_m: 0.7420, bbox_mAP_l: 0.7980, bbox_mAP_copypaste: 0.789 0.977 0.859 0.900 0.742 0.798
2023-04-04 09:49:52,605 - mmdet - INFO - Epoch [22][50/250]	lr: 1.000e-03, eta: 0:13:02, time: 1.185, data_time: 0.069, memory: 13415, loss_cls: 0.0199, loss_bbox: 0.0792, loss_centerness: 0.5954, loss_bbox_boder: 0.1602, loss_cls_boder: 0.0372, loss: 0.8919
2023-04-04 09:50:48,724 - mmdet - INFO - Epoch [22][100/250]	lr: 1.000e-03, eta: 0:12:06, time: 1.122, data_time: 0.008, memory: 13415, loss_cls: 0.0205, loss_bbox: 0.0879, loss_centerness: 0.5958, loss_bbox_boder: 0.1760, loss_cls_boder: 0.0398, loss: 0.9200
2023-04-04 09:51:44,754 - mmdet - INFO - Epoch [22][150/250]	lr: 1.000e-03, eta: 0:11:10, time: 1.121, data_time: 0.009, memory: 13415, loss_cls: 0.0213, loss_bbox: 0.0829, loss_centerness: 0.5962, loss_bbox_boder: 0.1674, loss_cls_boder: 0.0405, loss: 0.9084
2023-04-04 09:52:41,356 - mmdet - INFO - Epoch [22][200/250]	lr: 1.000e-03, eta: 0:10:15, time: 1.132, data_time: 0.009, memory: 13415, loss_cls: 0.0210, loss_bbox: 0.0824, loss_centerness: 0.5949, loss_bbox_boder: 0.1648, loss_cls_boder: 0.0398, loss: 0.9030
2023-04-04 09:53:37,657 - mmdet - INFO - Exp name: atss_r50_fpn_1x_coco.py
2023-04-04 09:53:37,658 - mmdet - INFO - Epoch [22][250/250]	lr: 1.000e-03, eta: 0:09:19, time: 1.126, data_time: 0.010, memory: 13415, loss_cls: 0.0213, loss_bbox: 0.0833, loss_centerness: 0.5942, loss_bbox_boder: 0.1702, loss_cls_boder: 0.0406, loss: 0.9095
2023-04-04 09:53:37,728 - mmdet - INFO - Saving checkpoint at 22 epochs
2023-04-04 09:54:09,628 - mmdet - INFO - Evaluating bbox...
2023-04-04 09:54:10,489 - mmdet - INFO - 
Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.797
Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.977
Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.859
Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.850
Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.751
Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.806
Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.878
Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.878
Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.878
Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.850
Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.816
Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.887

2023-04-04 09:54:10,499 - mmdet - INFO - Exp name: atss_r50_fpn_1x_coco.py
2023-04-04 09:54:10,499 - mmdet - INFO - Epoch(val) [22][250]	bbox_mAP: 0.7970, bbox_mAP_50: 0.9770, bbox_mAP_75: 0.8590, bbox_mAP_s: 0.8500, bbox_mAP_m: 0.7510, bbox_mAP_l: 0.8060, bbox_mAP_copypaste: 0.797 0.977 0.859 0.850 0.751 0.806
2023-04-04 09:55:09,800 - mmdet - INFO - Epoch [23][50/250]	lr: 1.000e-04, eta: 0:08:24, time: 1.186, data_time: 0.065, memory: 13415, loss_cls: 0.0195, loss_bbox: 0.0796, loss_centerness: 0.5940, loss_bbox_boder: 0.1587, loss_cls_boder: 0.0369, loss: 0.8887
2023-04-04 09:56:06,009 - mmdet - INFO - Epoch [23][100/250]	lr: 1.000e-04, eta: 0:07:28, time: 1.124, data_time: 0.008, memory: 13415, loss_cls: 0.0205, loss_bbox: 0.0806, loss_centerness: 0.5946, loss_bbox_boder: 0.1602, loss_cls_boder: 0.0391, loss: 0.8949
2023-04-04 09:57:02,341 - mmdet - INFO - Epoch [23][150/250]	lr: 1.000e-04, eta: 0:06:32, time: 1.127, data_time: 0.008, memory: 13415, loss_cls: 0.0193, loss_bbox: 0.0780, loss_centerness: 0.5965, loss_bbox_boder: 0.1531, loss_cls_boder: 0.0364, loss: 0.8833
2023-04-04 09:57:58,558 - mmdet - INFO - Epoch [23][200/250]	lr: 1.000e-04, eta: 0:05:36, time: 1.124, data_time: 0.009, memory: 13415, loss_cls: 0.0178, loss_bbox: 0.0724, loss_centerness: 0.5935, loss_bbox_boder: 0.1441, loss_cls_boder: 0.0331, loss: 0.8609
2023-04-04 09:58:54,832 - mmdet - INFO - Exp name: atss_r50_fpn_1x_coco.py
2023-04-04 09:58:54,832 - mmdet - INFO - Epoch [23][250/250]	lr: 1.000e-04, eta: 0:04:40, time: 1.125, data_time: 0.009, memory: 13415, loss_cls: 0.0213, loss_bbox: 0.0830, loss_centerness: 0.5972, loss_bbox_boder: 0.1661, loss_cls_boder: 0.0407, loss: 0.9082
2023-04-04 09:58:54,925 - mmdet - INFO - Saving checkpoint at 23 epochs
2023-04-04 09:59:26,811 - mmdet - INFO - Evaluating bbox...
2023-04-04 09:59:27,628 - mmdet - INFO - 
Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.801
Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.977
Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.861
Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.900
Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.764
Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.809
Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.882
Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.882
Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.882
Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.900
Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.834
Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.890

2023-04-04 09:59:27,640 - mmdet - INFO - Exp name: atss_r50_fpn_1x_coco.py
2023-04-04 09:59:27,640 - mmdet - INFO - Epoch(val) [23][250]	bbox_mAP: 0.8010, bbox_mAP_50: 0.9770, bbox_mAP_75: 0.8610, bbox_mAP_s: 0.9000, bbox_mAP_m: 0.7640, bbox_mAP_l: 0.8090, bbox_mAP_copypaste: 0.801 0.977 0.861 0.900 0.764 0.809
2023-04-04 10:00:26,948 - mmdet - INFO - Epoch [24][50/250]	lr: 1.000e-04, eta: 0:03:44, time: 1.186, data_time: 0.066, memory: 13415, loss_cls: 0.0203, loss_bbox: 0.0791, loss_centerness: 0.5953, loss_bbox_boder: 0.1574, loss_cls_boder: 0.0384, loss: 0.8905
2023-04-04 10:01:23,239 - mmdet - INFO - Epoch [24][100/250]	lr: 1.000e-04, eta: 0:02:48, time: 1.126, data_time: 0.008, memory: 13415, loss_cls: 0.0195, loss_bbox: 0.0781, loss_centerness: 0.5935, loss_bbox_boder: 0.1541, loss_cls_boder: 0.0368, loss: 0.8819
2023-04-04 10:02:19,509 - mmdet - INFO - Epoch [24][150/250]	lr: 1.000e-04, eta: 0:01:52, time: 1.125, data_time: 0.008, memory: 13415, loss_cls: 0.0198, loss_bbox: 0.0789, loss_centerness: 0.5940, loss_bbox_boder: 0.1559, loss_cls_boder: 0.0374, loss: 0.8860
2023-04-04 10:03:15,946 - mmdet - INFO - Epoch [24][200/250]	lr: 1.000e-04, eta: 0:00:56, time: 1.129, data_time: 0.009, memory: 13415, loss_cls: 0.0177, loss_bbox: 0.0748, loss_centerness: 0.5967, loss_bbox_boder: 0.1477, loss_cls_boder: 0.0332, loss: 0.8701
2023-04-04 10:04:12,207 - mmdet - INFO - Exp name: atss_r50_fpn_1x_coco.py
2023-04-04 10:04:12,207 - mmdet - INFO - Epoch [24][250/250]	lr: 1.000e-04, eta: 0:00:00, time: 1.125, data_time: 0.009, memory: 13415, loss_cls: 0.0185, loss_bbox: 0.0771, loss_centerness: 0.5951, loss_bbox_boder: 0.1531, loss_cls_boder: 0.0345, loss: 0.8784
2023-04-04 10:04:12,287 - mmdet - INFO - Saving checkpoint at 24 epochs
2023-04-04 10:04:44,115 - mmdet - INFO - Evaluating bbox...
2023-04-04 10:04:44,915 - mmdet - INFO - 
Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.802
Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.977
Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.861
Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.900
Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.765
Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.810
Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.884
Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.884
Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.884
Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.900
Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.834
Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.892

2023-04-04 10:04:44,924 - mmdet - INFO - Exp name: atss_r50_fpn_1x_coco.py
2023-04-04 10:04:44,924 - mmdet - INFO - Epoch(val) [24][250]	bbox_mAP: 0.8020, bbox_mAP_50: 0.9770, bbox_mAP_75: 0.8610, bbox_mAP_s: 0.9000, bbox_mAP_m: 0.7650, bbox_mAP_l: 0.8100, bbox_mAP_copypaste: 0.802 0.977 0.861 0.900 0.765 0.810
