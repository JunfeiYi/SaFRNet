{"mmdet_version": "2.25.3HEAD", "CLASSES": ["pinsub", "pinsug", "pinsumiss", "plinkgrp", "pnest", "psusp", "pvib", "pvibmiss"], "env_info": "sys.platform: linux\nPython: 3.8.12 (default, Oct 12 2021, 13:49:34) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: :/usr/local/cuda-11.1\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.8.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0+cu111\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.25.3+HEAD", "config": "dataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=4,\n    train=dict(\n        type='CocoDataset',\n        ann_file='data/coco/annotations/instances_train2017.json',\n        img_prefix='data/coco/train2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('pinsub', 'pinsug', 'pinsumiss', 'plinkgrp', 'pnest', 'psusp',\n                 'pvib', 'pvibmiss')),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('pinsub', 'pinsug', 'pinsumiss', 'plinkgrp', 'pnest', 'psusp',\n                 'pvib', 'pvibmiss')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('pinsub', 'pinsug', 'pinsumiss', 'plinkgrp', 'pnest', 'psusp',\n                 'pvib', 'pvibmiss')))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='GCSGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=24)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'checkpoints/atss_r50_fpn_1x_coco_20200209-985f7bd0.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nmodel = dict(\n    type='ATSS',\n    backbone=dict(\n        type='AugResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_output',\n        num_outs=5),\n    bbox_head=dict(\n        type='BoderATSSHead',\n        num_classes=8,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            ratios=[1.0],\n            octave_base_scale=8,\n            scales_per_octave=1,\n            strides=[8, 16, 32, 64, 128]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[0.1, 0.1, 0.2, 0.2]),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='GIoULoss', loss_weight=2.0),\n        loss_centerness=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)),\n    train_cfg=dict(\n        assigner=dict(type='ATSSAssigner', topk=9),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='soft_nms', iou_threshold=0.6, min_score=0.001),\n        max_per_img=100))\nclasses = ('pinsub', 'pinsug', 'pinsumiss', 'plinkgrp', 'pnest', 'psusp',\n           'pvib', 'pvibmiss')\nwork_dir = './work_dirs/atss_r50_fpn_1x_coco'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 51627470, "exp_name": "atss_r50_fpn_1x_coco.py", "epoch": 17, "iter": 4250, "mmcv_version": "1.7.0", "time": "Mon Apr  3 22:46:17 2023", "hook_msgs": {"last_ckpt": "/home/user/Documents/0Yi_work/tiny-mmdetection/work_dirs/atss_r50_fpn_1x_coco/epoch_16.pth"}}
{"mode": "train", "epoch": 18, "iter": 50, "lr": 0.001, "memory": 13415, "data_time": 0.07001, "loss_cls": 0.02474, "loss_bbox": 0.09894, "loss_centerness": 0.59914, "loss_bbox_boder": 0.20522, "loss_cls_boder": 0.04835, "loss": 0.97639, "time": 1.19049}
{"mode": "train", "epoch": 18, "iter": 100, "lr": 0.001, "memory": 13415, "data_time": 0.00614, "loss_cls": 0.02545, "loss_bbox": 0.10087, "loss_centerness": 0.59531, "loss_bbox_boder": 0.20764, "loss_cls_boder": 0.04901, "loss": 0.97828, "time": 1.08078}
{"mode": "train", "epoch": 18, "iter": 150, "lr": 0.001, "memory": 13415, "data_time": 0.006, "loss_cls": 0.02497, "loss_bbox": 0.10268, "loss_centerness": 0.59637, "loss_bbox_boder": 0.21083, "loss_cls_boder": 0.04872, "loss": 0.98357, "time": 1.09213}
{"mode": "train", "epoch": 18, "iter": 200, "lr": 0.001, "memory": 13415, "data_time": 0.00593, "loss_cls": 0.02504, "loss_bbox": 0.09694, "loss_centerness": 0.59912, "loss_bbox_boder": 0.19983, "loss_cls_boder": 0.0488, "loss": 0.96972, "time": 1.08795}
{"mode": "train", "epoch": 18, "iter": 250, "lr": 0.001, "memory": 13415, "data_time": 0.00594, "loss_cls": 0.0252, "loss_bbox": 0.09548, "loss_centerness": 0.59436, "loss_bbox_boder": 0.1957, "loss_cls_boder": 0.04873, "loss": 0.95946, "time": 1.09588}
{"mode": "val", "epoch": 18, "iter": 250, "lr": 0.001, "bbox_mAP": 0.756, "bbox_mAP_50": 0.974, "bbox_mAP_75": 0.842, "bbox_mAP_s": 0.85, "bbox_mAP_m": 0.676, "bbox_mAP_l": 0.766, "bbox_mAP_copypaste": "0.756 0.974 0.842 0.850 0.676 0.766"}
{"mode": "train", "epoch": 19, "iter": 50, "lr": 0.001, "memory": 13415, "data_time": 0.06251, "loss_cls": 0.02316, "loss_bbox": 0.09287, "loss_centerness": 0.59302, "loss_bbox_boder": 0.18777, "loss_cls_boder": 0.04415, "loss": 0.94097, "time": 1.14544}
{"mode": "train", "epoch": 19, "iter": 100, "lr": 0.001, "memory": 13415, "data_time": 0.00636, "loss_cls": 0.02184, "loss_bbox": 0.09494, "loss_centerness": 0.59806, "loss_bbox_boder": 0.19304, "loss_cls_boder": 0.04228, "loss": 0.95017, "time": 1.0956}
{"mode": "train", "epoch": 19, "iter": 150, "lr": 0.001, "memory": 13415, "data_time": 0.00644, "loss_cls": 0.02469, "loss_bbox": 0.09869, "loss_centerness": 0.59909, "loss_bbox_boder": 0.20178, "loss_cls_boder": 0.04747, "loss": 0.97172, "time": 1.09639}
{"mode": "train", "epoch": 19, "iter": 200, "lr": 0.001, "memory": 13415, "data_time": 0.0066, "loss_cls": 0.02346, "loss_bbox": 0.09098, "loss_centerness": 0.59575, "loss_bbox_boder": 0.18691, "loss_cls_boder": 0.0453, "loss": 0.94241, "time": 1.09118}
{"mode": "train", "epoch": 19, "iter": 250, "lr": 0.001, "memory": 13415, "data_time": 0.00661, "loss_cls": 0.02552, "loss_bbox": 0.09036, "loss_centerness": 0.5958, "loss_bbox_boder": 0.18393, "loss_cls_boder": 0.0496, "loss": 0.94521, "time": 1.0976}
{"mode": "val", "epoch": 19, "iter": 250, "lr": 0.001, "bbox_mAP": 0.771, "bbox_mAP_50": 0.975, "bbox_mAP_75": 0.849, "bbox_mAP_s": 0.85, "bbox_mAP_m": 0.693, "bbox_mAP_l": 0.78, "bbox_mAP_copypaste": "0.771 0.975 0.849 0.850 0.693 0.780"}
{"mode": "train", "epoch": 20, "iter": 50, "lr": 0.001, "memory": 13415, "data_time": 0.06516, "loss_cls": 0.02186, "loss_bbox": 0.0882, "loss_centerness": 0.59488, "loss_bbox_boder": 0.17977, "loss_cls_boder": 0.04113, "loss": 0.92583, "time": 1.14851}
{"mode": "train", "epoch": 20, "iter": 100, "lr": 0.001, "memory": 13415, "data_time": 0.00626, "loss_cls": 0.02126, "loss_bbox": 0.08487, "loss_centerness": 0.59498, "loss_bbox_boder": 0.17339, "loss_cls_boder": 0.04067, "loss": 0.91516, "time": 1.09382}
{"mode": "train", "epoch": 20, "iter": 150, "lr": 0.001, "memory": 13415, "data_time": 0.00648, "loss_cls": 0.02154, "loss_bbox": 0.08502, "loss_centerness": 0.59557, "loss_bbox_boder": 0.17199, "loss_cls_boder": 0.04179, "loss": 0.91591, "time": 1.09629}
{"mode": "train", "epoch": 20, "iter": 200, "lr": 0.001, "memory": 13415, "data_time": 0.00662, "loss_cls": 0.02343, "loss_bbox": 0.09089, "loss_centerness": 0.59596, "loss_bbox_boder": 0.18301, "loss_cls_boder": 0.04537, "loss": 0.93867, "time": 1.09895}
{"mode": "train", "epoch": 20, "iter": 250, "lr": 0.001, "memory": 13415, "data_time": 0.00676, "loss_cls": 0.02288, "loss_bbox": 0.09043, "loss_centerness": 0.59501, "loss_bbox_boder": 0.18356, "loss_cls_boder": 0.04344, "loss": 0.93532, "time": 1.09536}
{"mode": "val", "epoch": 20, "iter": 250, "lr": 0.001, "bbox_mAP": 0.783, "bbox_mAP_50": 0.976, "bbox_mAP_75": 0.856, "bbox_mAP_s": 0.901, "bbox_mAP_m": 0.745, "bbox_mAP_l": 0.791, "bbox_mAP_copypaste": "0.783 0.976 0.856 0.901 0.745 0.791"}
{"mode": "train", "epoch": 21, "iter": 50, "lr": 0.001, "memory": 13415, "data_time": 0.06138, "loss_cls": 0.02041, "loss_bbox": 0.07961, "loss_centerness": 0.59442, "loss_bbox_boder": 0.16221, "loss_cls_boder": 0.03895, "loss": 0.89559, "time": 1.17391}
{"mode": "train", "epoch": 21, "iter": 100, "lr": 0.001, "memory": 13415, "data_time": 0.00829, "loss_cls": 0.02098, "loss_bbox": 0.08776, "loss_centerness": 0.59793, "loss_bbox_boder": 0.17667, "loss_cls_boder": 0.03984, "loss": 0.92318, "time": 1.12128}
{"mode": "train", "epoch": 21, "iter": 150, "lr": 0.001, "memory": 13415, "data_time": 0.00913, "loss_cls": 0.02133, "loss_bbox": 0.08369, "loss_centerness": 0.59418, "loss_bbox_boder": 0.16902, "loss_cls_boder": 0.04056, "loss": 0.90879, "time": 1.12707}
{"mode": "train", "epoch": 21, "iter": 200, "lr": 0.001, "memory": 13415, "data_time": 0.00964, "loss_cls": 0.02187, "loss_bbox": 0.08907, "loss_centerness": 0.59545, "loss_bbox_boder": 0.18051, "loss_cls_boder": 0.04209, "loss": 0.92898, "time": 1.12622}
{"mode": "train", "epoch": 21, "iter": 250, "lr": 0.001, "memory": 13415, "data_time": 0.01013, "loss_cls": 0.02404, "loss_bbox": 0.08843, "loss_centerness": 0.59729, "loss_bbox_boder": 0.17812, "loss_cls_boder": 0.04677, "loss": 0.93464, "time": 1.12741}
{"mode": "val", "epoch": 21, "iter": 250, "lr": 0.001, "bbox_mAP": 0.789, "bbox_mAP_50": 0.977, "bbox_mAP_75": 0.859, "bbox_mAP_s": 0.9, "bbox_mAP_m": 0.742, "bbox_mAP_l": 0.798, "bbox_mAP_copypaste": "0.789 0.977 0.859 0.900 0.742 0.798"}
{"mode": "train", "epoch": 22, "iter": 50, "lr": 0.001, "memory": 13415, "data_time": 0.06856, "loss_cls": 0.01993, "loss_bbox": 0.0792, "loss_centerness": 0.5954, "loss_bbox_boder": 0.16016, "loss_cls_boder": 0.03725, "loss": 0.89194, "time": 1.1853}
{"mode": "train", "epoch": 22, "iter": 100, "lr": 0.001, "memory": 13415, "data_time": 0.00833, "loss_cls": 0.02049, "loss_bbox": 0.08795, "loss_centerness": 0.59584, "loss_bbox_boder": 0.17597, "loss_cls_boder": 0.03979, "loss": 0.92003, "time": 1.12238}
{"mode": "train", "epoch": 22, "iter": 150, "lr": 0.001, "memory": 13415, "data_time": 0.00914, "loss_cls": 0.02133, "loss_bbox": 0.08295, "loss_centerness": 0.59624, "loss_bbox_boder": 0.16739, "loss_cls_boder": 0.0405, "loss": 0.90841, "time": 1.12057}
{"mode": "train", "epoch": 22, "iter": 200, "lr": 0.001, "memory": 13415, "data_time": 0.00942, "loss_cls": 0.02099, "loss_bbox": 0.0824, "loss_centerness": 0.59492, "loss_bbox_boder": 0.16484, "loss_cls_boder": 0.03984, "loss": 0.90299, "time": 1.13203}
{"mode": "train", "epoch": 22, "iter": 250, "lr": 0.001, "memory": 13415, "data_time": 0.01008, "loss_cls": 0.02128, "loss_bbox": 0.08325, "loss_centerness": 0.5942, "loss_bbox_boder": 0.17022, "loss_cls_boder": 0.04057, "loss": 0.90952, "time": 1.126}
{"mode": "val", "epoch": 22, "iter": 250, "lr": 0.001, "bbox_mAP": 0.797, "bbox_mAP_50": 0.977, "bbox_mAP_75": 0.859, "bbox_mAP_s": 0.85, "bbox_mAP_m": 0.751, "bbox_mAP_l": 0.806, "bbox_mAP_copypaste": "0.797 0.977 0.859 0.850 0.751 0.806"}
{"mode": "train", "epoch": 23, "iter": 50, "lr": 0.0001, "memory": 13415, "data_time": 0.06503, "loss_cls": 0.01945, "loss_bbox": 0.07962, "loss_centerness": 0.59399, "loss_bbox_boder": 0.15867, "loss_cls_boder": 0.03694, "loss": 0.88868, "time": 1.18575}
{"mode": "train", "epoch": 23, "iter": 100, "lr": 0.0001, "memory": 13415, "data_time": 0.00751, "loss_cls": 0.0205, "loss_bbox": 0.08057, "loss_centerness": 0.59458, "loss_bbox_boder": 0.16015, "loss_cls_boder": 0.03908, "loss": 0.89488, "time": 1.12418}
{"mode": "train", "epoch": 23, "iter": 150, "lr": 0.0001, "memory": 13415, "data_time": 0.00804, "loss_cls": 0.01934, "loss_bbox": 0.07796, "loss_centerness": 0.59653, "loss_bbox_boder": 0.15312, "loss_cls_boder": 0.03637, "loss": 0.88333, "time": 1.12659}
{"mode": "train", "epoch": 23, "iter": 200, "lr": 0.0001, "memory": 13415, "data_time": 0.00917, "loss_cls": 0.01782, "loss_bbox": 0.07244, "loss_centerness": 0.59346, "loss_bbox_boder": 0.14414, "loss_cls_boder": 0.03306, "loss": 0.86093, "time": 1.12433}
{"mode": "train", "epoch": 23, "iter": 250, "lr": 0.0001, "memory": 13415, "data_time": 0.009, "loss_cls": 0.02127, "loss_bbox": 0.083, "loss_centerness": 0.59723, "loss_bbox_boder": 0.16608, "loss_cls_boder": 0.04066, "loss": 0.90824, "time": 1.12544}
{"mode": "val", "epoch": 23, "iter": 250, "lr": 0.0001, "bbox_mAP": 0.801, "bbox_mAP_50": 0.977, "bbox_mAP_75": 0.861, "bbox_mAP_s": 0.9, "bbox_mAP_m": 0.764, "bbox_mAP_l": 0.809, "bbox_mAP_copypaste": "0.801 0.977 0.861 0.900 0.764 0.809"}
{"mode": "train", "epoch": 24, "iter": 50, "lr": 0.0001, "memory": 13415, "data_time": 0.0655, "loss_cls": 0.02035, "loss_bbox": 0.07911, "loss_centerness": 0.59529, "loss_bbox_boder": 0.15739, "loss_cls_boder": 0.0384, "loss": 0.89054, "time": 1.18591}
{"mode": "train", "epoch": 24, "iter": 100, "lr": 0.0001, "memory": 13415, "data_time": 0.00768, "loss_cls": 0.01947, "loss_bbox": 0.07807, "loss_centerness": 0.59346, "loss_bbox_boder": 0.15412, "loss_cls_boder": 0.03675, "loss": 0.88188, "time": 1.12583}
{"mode": "train", "epoch": 24, "iter": 150, "lr": 0.0001, "memory": 13415, "data_time": 0.00844, "loss_cls": 0.01981, "loss_bbox": 0.07886, "loss_centerness": 0.59405, "loss_bbox_boder": 0.15585, "loss_cls_boder": 0.03738, "loss": 0.88595, "time": 1.12535}
{"mode": "train", "epoch": 24, "iter": 200, "lr": 0.0001, "memory": 13415, "data_time": 0.00909, "loss_cls": 0.01771, "loss_bbox": 0.07476, "loss_centerness": 0.59669, "loss_bbox_boder": 0.14769, "loss_cls_boder": 0.03325, "loss": 0.87011, "time": 1.12872}
{"mode": "train", "epoch": 24, "iter": 250, "lr": 0.0001, "memory": 13415, "data_time": 0.00926, "loss_cls": 0.01849, "loss_bbox": 0.07715, "loss_centerness": 0.59514, "loss_bbox_boder": 0.15307, "loss_cls_boder": 0.03453, "loss": 0.87838, "time": 1.1252}
{"mode": "val", "epoch": 24, "iter": 250, "lr": 0.0001, "bbox_mAP": 0.802, "bbox_mAP_50": 0.977, "bbox_mAP_75": 0.861, "bbox_mAP_s": 0.9, "bbox_mAP_m": 0.765, "bbox_mAP_l": 0.81, "bbox_mAP_copypaste": "0.802 0.977 0.861 0.900 0.765 0.810"}
